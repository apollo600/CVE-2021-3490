diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index f77b475fc420..11a94556dcfc 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -1372,7 +1372,7 @@ config IEE
 # Config for credentials isolation
 config CRED_ISO
 	depends on IEE
-	def_bool y
+	def_bool n
 
 config MITIGATE_SPECTRE_BRANCH_HISTORY
 	bool "Mitigate Spectre style attacks against branch history" if EXPERT
diff --git a/kernel/bpf/arraymap.c b/kernel/bpf/arraymap.c
index e3bc27c42ca9..cde3f1b013d8 100644
--- a/kernel/bpf/arraymap.c
+++ b/kernel/bpf/arraymap.c
@@ -2,7 +2,6 @@
 /* Copyright (c) 2011-2014 PLUMgrid, http://plumgrid.com
  * Copyright (c) 2016,2017 Facebook
  */
-#include "asm/memory.h"
 #include <linux/bpf.h>
 #include <linux/btf.h>
 #include <linux/err.h>
diff --git a/kernel/bpf/verifier.c b/kernel/bpf/verifier.c
index 4da9a4713318..83638be56dc7 100644
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@ -3,8 +3,6 @@
  * Copyright (c) 2016 Facebook
  * Copyright (c) 2018 Covalent IO, Inc. http://covalent.io
  */
-#include "asm/insn.h"
-#include "linux/bpf.h"
 #include <uapi/linux/btf.h>
 #include <linux/kernel.h>
 #include <linux/types.h>
@@ -6538,7 +6536,7 @@ static void scalar32_min_max_and(struct bpf_reg_state *dst_reg,
 	u32 umax_val = src_reg->u32_max_value;
 
 	if (src_known && dst_known) {
-		__mark_reg32_known(dst_reg, var32_off.value);
+		// __mark_reg32_known(dst_reg, var32_off.value);
 		return;
 	}
 
@@ -6607,7 +6605,7 @@ static void scalar32_min_max_or(struct bpf_reg_state *dst_reg,
 	u32 umin_val = src_reg->u32_min_value;
 
 	if (src_known && dst_known) {
-		__mark_reg32_known(dst_reg, var32_off.value);
+		// __mark_reg32_known(dst_reg, var32_off.value);
 		return;
 	}
 
@@ -6675,7 +6673,7 @@ static void scalar32_min_max_xor(struct bpf_reg_state *dst_reg,
 	s32 smin_val = src_reg->s32_min_value;
 
 	if (src_known && dst_known) {
-		__mark_reg32_known(dst_reg, var32_off.value);
+		// __mark_reg32_known(dst_reg, var32_off.value);
 		return;
 	}
 
@@ -12353,7 +12351,7 @@ static int fixup_bpf_calls(struct bpf_verifier_env *env)
 			}
 			if (!issrc)
 				*patch++ = BPF_MOV64_REG(insn->dst_reg, insn->src_reg);
-			insn->src_reg = BPF_REG_AX;
+			// insn->src_reg = BPF_REG_AX;
 			if (isneg)
 				insn->code = insn->code == code_add ?
 					     code_sub : code_add;
